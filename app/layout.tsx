// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";
// import NhostProviderContext from "@/provider/NhostProvider";
// import ApolloProviderContext from "@/provider/ApolloProviderContext";
// // import SiteProvider from "@/provider/SiteProvider";
// import { getSiteData } from "@/lib/getSiteData";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Test",
//   description: "Generated by Test",
// };

// export default async function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const siteData = await getSiteData();
//   if (!siteData) return <>{children}</>;
//   return (
//     <html lang="en" suppressHydrationWarning>
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         <NhostProviderContext>
//           <ApolloProviderContext>
//             {/* <SiteProvider> */}
//             {children}
//             {/* </SiteProvider> */}
//           </ApolloProviderContext>
//         </NhostProviderContext>
//       </body>
//     </html>
//   );
// }

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import NhostProviderContext from "@/provider/NhostProvider";
import ApolloProviderContext from "@/provider/ApolloProviderContext";
import { getSiteData } from "@/lib/getSiteData";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Test",
  description: "Generated by Test",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const siteData = await getSiteData();

  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        {/* Dynamic Styles */}
        <style>
          {`
            :root {
              --primary-color: ${siteData?.primary || "Blue"};
              --secondary-color: ${siteData?.secondary || "Black"};
              --primary-font: ${siteData?.font || "Inter"};
            }
            body { font-family: ${siteData?.font || "Inter"}, sans-serif; }
          `}
        </style>

        {/* Favicon */}
        {siteData?.favIcon && (
          <link
            rel="icon"
            href={`${process.env.NEXT_PUBLIC_NHOST_STORAGE_URL}${siteData.favIcon}`}
          />
        )}
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NhostProviderContext>
          <ApolloProviderContext>{children}</ApolloProviderContext>
        </NhostProviderContext>
      </body>
    </html>
  );
}
